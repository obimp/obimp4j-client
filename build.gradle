plugins {
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
}

group = 'io.github.obimp'
version = '0.1.7'

repositories {
    mavenCentral()
    maven {
        url = uri('https://maven.pkg.github.com/obimp/obimp4j-core')
        credentials {
            username = project.findProperty('gpr.user') ?: System.getenv('GPR_USERNAME')
            password = project.findProperty('gpr.key') ?: System.getenv('GPR_TOKEN')
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

java {
    withSourcesJar()
    withJavadocJar()
}

dependencies {
    implementation 'io.github.obimp:obimp4j-core:0.1.9'
    implementation 'org.bouncycastle:bctls-jdk18on:1.72'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = 'OSSRH'
            def releaseRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotRepoUrl : releaseRepoUrl
            credentials {
                username = project.findProperty('ossrh.user') ?: System.getenv('OSSRH_USERNAME')
                password = project.findProperty('ossrh.key') ?: System.getenv('OSSRH_PASSWORD')
            }
        }
        maven {
            name = 'GithubPackages'
            url = 'https://maven.pkg.github.com/obimp/obimp4j-client'
            credentials {
                username = project.findProperty('gpr.user') ?: System.getenv('GPR_USERNAME')
                password = project.findProperty('gpr.key') ?: System.getenv('GPR_TOKEN')
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'obimp4j-client'
            from(components.java)
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    //noinspection GroovyImplicitNullArgumentCall
                    fromResolutionResult()
                }
            }
            pom {
                name = 'OBIMP4J'
                description = 'Java OBIMP (Open Binary Instant Messaging Protocol) implementation, client library.'
                url = 'https://github.com/obimp/obimp4j-client'
                licenses {
                    license {
                        name = 'The GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'libalex'
                        name = 'Alexander Krysin'
                        email = 'alessandro56903@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/obimp/obimp4j-client.git'
                    developerConnection = 'scm:git:ssh://github.com/obimp/obimp4j-client.git'
                    url = 'https://github.com/obimp/obimp4j-client'
                }
            }
        }
    }
}

signing {
    if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains('windows')) {
        useGpgCmd()
    } else {
        def signingKey = findProperty('signingKey')
        def signingPassword = findProperty('signingPassword')
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.mavenJava
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}